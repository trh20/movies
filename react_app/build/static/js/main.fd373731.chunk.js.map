{"version":3,"sources":["Table.js","App.js","theme.js","serviceWorker.js","index.js"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","Table","columns","data","title","options","editable","detailPanel","icons","App","useState","movies","setMovies","isLoading","setIsLoading","useEffect","a","fetchMovies","getMovies","fetch","response","json","responseBody","createMovie","movie","defaultMovie","directors","cast","plot","newMovie","method","body","JSON","stringify","headers","updateMovie","id","deleteMovie","field","render","rowData","href","wiki_url","target","rel","alt","src","width","LinearProgress","style","margin","borderRadius","boxShadow","filtering","pageSize","emptyRowsWhenPaging","addRowPosition","padding","backgroundColor","color","letterSpacing","onRowAdd","Promise","resolve","reject","success","onRowUpdate","oldMovie","dataUpdate","index","tableData","onRowDelete","dataDelete","splice","theme","createMuiTheme","palette","type","Boolean","window","location","hostname","match","ReactDOM","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd373731.chunk.js","sourcesContent":["import React from 'react';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n  };\n\n\nfunction Table(props) {\n    const { columns, data, title, options, editable, detailPanel } = props;\n    return (\n        <MaterialTable\n            columns={columns}\n            data={data}\n            title={title}\n            icons={tableIcons}\n            options={options}\n            editable={editable}\n            detailPanel={detailPanel}\n        />\n    )\n}\n\nexport default Table;\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nimport Table from './Table';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      const movies = await fetchMovies();\n      setMovies(movies)\n      setIsLoading(false);\n    }  \n    getMovies();\n  }, []);\n\n  const fetchMovies = async () => {\n    const response = await fetch('/movies');\n    const responseBody = await response.json();\n    return responseBody.movies;\n  }\n\n  const createMovie = async ({ movie }) => {\n    const defaultMovie = {\n      directors: null,\n      cast: null,\n      plot: null,\n    }\n    const newMovie = {...defaultMovie, ...movie};\n    const response = await fetch(`/movies`, {\n      method: 'POST',\n      body: JSON.stringify(newMovie),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const responseBody = await response.json();\n    return responseBody;\n  }\n\n  const updateMovie = async ({ id, movie }) => {\n    const response = await fetch(`/movies/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(movie),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const responseBody = await response.json();\n    return responseBody;\n  }\n\n  const deleteMovie = async ({ id }) => {\n    const response = await fetch(`/movies/${id}`, {\n      method: 'DELETE'\n    });\n    const responseBody = await response.json();\n    return responseBody;\n  }\n\n  const columns = [\n    { title: 'Year', field: 'year' },\n    { title: 'Title', field: 'title' },\n    { title: 'Origin/Ethnicity', field: 'origin_ethnicity' },\n    { title: 'Directors', field: 'directors' },\n    { title: 'Cast', field: 'cast' },\n    { title: 'Genre', field: 'genre' },\n    {\n      title: 'Wiki URL',\n      field: 'wiki_url',\n      render: rowData => \n        <a href={rowData.wiki_url} target={'_blank'} rel={'noopener noreferrer'}>\n          <img\n            alt='WikiPedia Logo'\n            src={'https://upload.wikimedia.org/wikipedia/en/thumb/8/80/Wikipedia-logo-v2.svg/440px-Wikipedia-logo-v2.svg.png'}\n            width={30}\n          />\n        </a>\n    }\n  ];\n\n  return (\n    <div>\n      { isLoading && <LinearProgress /> }\n      <div style={{ \n        margin: '16px',\n        borderRadius: '2px',\n        boxShadow: '3px 3px 5px 6px rgba(0, 0, 0, 0,2)'\n        }}>\n        <Table\n          columns={columns}\n          data={movies}\n          title='Movies'\n          options={{\n            filtering: true,\n            pageSize: 25,\n            emptyRowsWhenPaging: false,\n            addRowPosition: 'first'\n          }}\n          detailPanel={rowData => {\n            return (\n              <div style={{\n                margin: '16px',\n                padding: '16px',\n                backgroundColor: 'white',\n                color: 'black',\n                borderRadius: '2px',\n                boxShadow: '3px 3px 5px 6px rgba(0, 0, 0, 0,2)',\n                letterSpacing: '.03em'\n              }}>{rowData.plot}</div>\n            )\n          }}\n          editable={{\n            onRowAdd: newMovie =>\n              new Promise((async (resolve, reject) => {\n                debugger;\n                const response = await createMovie({ movie: newMovie });\n                if (!response.success) {\n                  return reject('Error adding movie');\n                }\n                setMovies([...movies, newMovie]);\n                \n                resolve();\n            })),\n            onRowUpdate: (newMovie, oldMovie) =>\n              new Promise((async (resolve, reject) => {\n                debugger;\n                const response = await updateMovie({ id: oldMovie.id, movie: newMovie });\n                if (!response.success) {\n                  return reject('Error updating movie');\n                }\n                const dataUpdate = [...movies];\n                const index = oldMovie.tableData.id;\n                dataUpdate[index] = newMovie;\n                setMovies([...dataUpdate]);\n                \n                resolve();\n            })),\n            onRowDelete: oldMovie =>\n              new Promise((async (resolve, reject) => {\n                  const response = await deleteMovie({ id: oldMovie.id });\n                  if (!response.success) {\n                    return reject('Error deleting movie');\n                  }\n                  const dataDelete = [...movies];\n                  const index = oldMovie.tableData.id;\n                  dataDelete.splice(index, 1);\n                  setMovies([...dataDelete]);\n                  \n                  resolve();\n              })),\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    }\n});\n\nexport default theme;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport App from './App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n     <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}